{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","newNode","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.8536def1.js","sourceRoot":"../src","sourcesContent":["window.dom = {\n    /**\n     * 创建节点\n     */\n    create(string) {\n        const container = document.createElement(\"template\")\n        container.innerHTML = string.trim()\n        return container.content.firstChild\n    },\n    /**\n     * 在一个节点后面新增一个节点\n     */\n    after(node, newNode) {\n        node.parentNode.insertBefore(newNode, node.nextSibling)\n    },\n    /**\n     * 在一个节点的前面插入一个节点\n     */\n    before(node, newNode) {\n        node.parentNode.insertBefore(newNode, node)\n    },\n    /**\n     * 在一个父节点里面新增一个子节点\n     */\n    append(parent, newNode) {\n        parent.appendChild(newNode)\n    },\n    /**\n     * 在一个节点外面新增一个父节点，例如:div外面再添加一层div\n     * 原理:\n     * 先把parent放到node的前面\n     * 然后把node放到parent的里面\n     */\n    wrap(node, parent) {\n        dom.before(node, parent)\n        dom.append(parent, node)\n    },\n    /**\n     * 删除节点\n     * 这是兼容IE的写法,通过父节点删除子节点\n     */\n    remove(node) {\n        node.parentNode.removeChild(node)\n        return node\n    },\n    /**\n     * 删除后代\n     */\n    empty(node) {\n        const { childNodes } = node\n        const array = []\n            // for (let i = 0; i < childNodes.length - 1; i++) {\n            //     dom.remove(childNodes[i])\n            //     array.push(childNodes[i])\n            // }\n            // return array\n        let x = node.firstChild\n        while (x) {\n            array.push(dom.remove(node.firstChild))\n            x = node.firstChild\n        }\n        return array\n    },\n    /**\n     * 修改节点\n     * 如果参数为3个,分别是节点名称、属性名、属性值，则是修改节点\n     * 如果参数为2个,分别是节点名称、属性名，则是查询节点\n     */\n    attr(node, name, value) { //重载\n        if (arguments.length === 3) {\n            node.setAttribute(name, value)\n        } else if (arguments.length === 2) {\n            return node.getAttribute(name)\n        }\n    },\n    /**\n     * 设置节点的内容\n     */\n    text(node, string) { //适配\n        if (arguments.length === 2) {\n            if ('innerText' in node) {\n                node.innerText = string\n            } else {\n                node.textContent = string\n            }\n        } else if (arguments.length === 1) {\n            if ('innerText' in node) {\n                return node.innerText\n            } else {\n                return node.textContent\n            }\n        }\n    },\n    /**\n     * 修改节点内容\n     */\n    html(node, string) {\n        if (arguments.length === 2) {\n            node.innerHTML = string\n        } else if (arguments.length === 1) {\n            return node.innerHTML\n        }\n    },\n    /**\n     * 修改节点的style\n     */\n    style(node, name, value) {\n        if (arguments.length === 3) {\n            //dom.style(argument1,argument2,argument3)\n            node.style[name] = value\n        } else if (arguments.length === 2) {\n            //dom.style(argument1,argument2)\n            if (typeof name === 'string') {\n                return node.style[name]\n            } else if (name instanceof Object) {\n                //dom.style(argument1)\n                const object = name\n                for (let key in name) {\n                    node.style[key] = object[key]\n                }\n            }\n        }\n    },\n    /**\n     * 在一个节点里添加一个class\n     */\n    class: {\n        add(node, className) {\n            node.classList.add(className)\n        },\n        /**\n         * 在一个节点里删除一个class\n         */\n        remove(node, className) {\n            node.classList.remove(className)\n        },\n        /**\n         * 查询节点里有没有这个class\n         */\n        has(node, className) {\n            return node.classList.contains(className)\n        }\n    },\n    /**\n     * 添加on监听\n     */\n    on(node, eventName, fn) {\n        node.addEventListener(eventName, fn)\n    },\n    /**\n     * 移除监听\n     */\n    off(node, eventName, fn) {\n        node.removeEventListener(eventName, fn)\n    },\n    /**\n     * 根据选择器查找节点\n     */\n    find(selector, scope) {\n        return (scope || document).querySelectorAll(selector)\n    },\n    /**\n     * 查找父节点\n     */\n    parent(node) {\n        return node.parentNode\n    },\n    /**\n     * 查找子节点\n     */\n    children(node) {\n        return node.children\n    },\n    /**\n     * 查找该节点的兄弟姐妹\n     */\n    siblings(node) {\n        return Array.from(node.parentNode.children).filter(n => n !== node)\n    },\n    /**\n     * 查找下一个节点\n     */\n    next(node) { //3表示文本，1表示节点\n        let x = node.nextSibling\n        while (x && x.nodeType === 3) {\n            x = x.nextSibling\n        }\n        return x\n    },\n    /**\n     * 查找上一个节点\n     */\n    previous(node) {\n        let x = node.previousSibling\n        while (x && x.nodeType === 3) {\n            x = x.previousSibling\n        }\n        return x\n    },\n    /**\n     * 遍历节点\n     */\n    each(nodeList, fn) {\n        for (let i = 0; i < nodeList.length; i++) {\n            fn.call(null, nodeList[i])\n        }\n    },\n    /**\n     * 获取元素排行第几\n     */\n    index(node) {\n        const list = dom.children(node.parentNode)\n        let i\n        for (i = 0; i < list.length; i++) {\n            if (list[i] === node) {\n                break\n            }\n        }\n        return i\n    }\n}"]}